# **AI vs. Human: Academic Essay Authenticity Challenge**

## **Overview**

This project focuses on developing a system to distinguish between machine-generated and human-authored academic essays. The challenge involves creating a binary classification model that can identify the source of an essay based on various linguistic and stylistic features, using **AI models** like GPT-4 and human-authored data.

## **Objectives**

- **Data Collection**: Gather essays authored by humans and generated by AI models in English.
- **Feature Extraction**: Extract relevant features from the text using **Natural Language Processing (NLP)** techniques.
- **Model Training**: Train and evaluate machine learning models to classify essays as either human-written or AI-generated.
- **Deployment**: Implement a real-time classification system for academic essays that uses the trained models and integrates with a user-friendly web interface.

## **Technology Stack**

- **Programming Languages**: Python 3.8+
- **Libraries**: NLTK, SpaCy, Scikit-learn, TensorFlow, PyTorch, Hugging Face Transformers
- **Tools**: BeautifulSoup, Scrapy for data scraping
- **Deployment**: Flask (for backend), FastAPI (for high-performance APIs), and React (for frontend)
- **Version Control**: Git, GitHub/GitLab
- **Cloud Services**: AWS S3 (for file storage), AWS Textract (for text extraction)

## **Installation**

```bash
# Clone the repository
git clone https://github.com/yourusername/ai-vs-human-authenticity.git

# Navigate to the project folder
cd ai-vs-human-authenticity

# Install necessary Python dependencies for the backend
pip install -r requirements.txt

# Set up the React frontend
cd frontend
npm install

# Configure AWS credentials and set up AWS Textract and S3 buckets

# Run the backend Flask API
python app.py

# Start the React frontend
npm start

# Open the web application in your browser
# http://localhost:3000

## **Project Features**

- **Essay Upload**: Users can upload academic essays in image or text format.
- **Text Extraction**: The backend uses AWS Textract to extract text from the uploaded images of essays.
- **AI Detection**: Using GPT-4 and other NLP techniques, the system classifies the essay as either AI-generated or Human-written based on the linguistic and stylistic features of the text.
- **Real-time Analysis**: The classification happens in real-time with a responsive user interface that shows results instantly.
- **Results Display**: The system shows the extracted text, prediction (AI vs. Human), and confidence percentage.
- **User-friendly Interface**: The React frontend is designed to be professional and clean, suitable for academic use. The design uses a soft color palette and a card-like layout to display the essay upload interface and results.

## **Frontend Features**

The frontend design uses React and modern CSS for a responsive, easy-to-use interface.

- **Centered Upload Form**: The "Upload Your Essay Image" and "Upload and Check" buttons remain centered and accessible.
- **Progress Bar**: Displays the upload progress when the user uploads their essay.
- **Results Section**: After upload, the classification results (AI vs. Human) and extracted text appear below the upload form.
- **Aesthetic Design**: Professional styling with subtle color gradients and rounded elements for a modern, polished look.

### **Visual Appeal**:
- Soft background gradients and professional blue tones.
- Buttons and input fields have modern hover effects and rounded borders to make the UI interactive.
- Results display is clean and prominent, making it easy to read predictions and extracted text.

