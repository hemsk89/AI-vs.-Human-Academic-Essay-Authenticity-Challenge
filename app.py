import openai
import boto3
from flask import Flask, request, jsonify
from werkzeug.utils import secure_filename
import os
import time
from botocore.exceptions import ClientError
from flask_cors import CORS

# OpenAI API key (Use environment variables for better security)
openai.api_key = os.getenv('OPENAI_API_KEY')

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS for cross-origin requests

# AWS S3 and Textract Configuration
s3 = boto3.client(
    's3',
    aws_access_key_id=os.getenv('AWS_ACCESS_KEY_ID'),
    aws_secret_access_key=os.getenv('AWS_SECRET_ACCESS_KEY'),
    region_name='us-east-1'  # Replace with your AWS region
)

textract = boto3.client('textract')

# Set upload folder and allowed file extensions
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['ALLOWED_EXTENSIONS'] = {'jpg', 'jpeg', 'png', 'pdf'}

# Create uploads directory if it doesn't exist
if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']


# Function to detect AI or Human text using GPT (Updated for better accuracy)
def detect_ai_or_human(text):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "You are an AI content detector trained to analyze text and determine whether it is generated by GPT-like models (AI) or written by a human. "
                        "Your analysis should be concise and focus on various linguistic factors such as sentence structure, coherence, emotional tone, "
                        "lexical choices, and stylistic elements that can indicate AI generation. Additionally, identify any signs of repetition, unnatural phrasing, or overuse of formal structure typical in AI writing.\n\n"
                        "Consider the following factors for your analysis:\n"
                        "1. Sentence structure: AI text often shows consistent, predictable sentence structure, while human text may vary.\n"
                        "2. Emotional tone: AI-generated text may be neutral or robotic, while human writing can show emotional depth.\n"
                        "3. Sentence variety: Humans often use a variety of sentence lengths, whereas AI text may have a more rigid structure.\n"
                        "4. Lexical variety: Humans tend to use a diverse vocabulary, while AI may repeat certain phrases.\n"
                        "5. Syntax errors: Humans may make occasional grammatical mistakes, but AI-generated text tends to be error-free.\n"
                        "6. Formal language: AI writing often uses more formal, academic language than humans typically use.\n"
                        "7. Creativity and novelty: Human writers often provide more creative and unique ideas compared to AI.\n"
                        "8. Logical coherence: AI may lack deeper logic or reasoning compared to human writing.\n"
                        "9. Personal pronouns: Humans often use personal pronouns (I, we) in subjective writing, while AI tends to avoid them.\n"
                        "10. Stylistic inconsistency: Humans show more variability in writing style based on content and context.\n"
                        "11. Flow and transitions: Human writing generally has smoother transitions between ideas, while AI can feel more disjointed.\n"
                        "12. Repetition: AI-generated content may have noticeable repetition of words or ideas.\n"
                        "13. Complexity and depth: Human writing often explores topics with greater depth and complexity.\n"
                        "14. Real-world context: Humans often incorporate real-world experiences or references, while AI may lack such context.\n"
                        "15. Logical errors: AI-generated content may sometimes have logical jumps or fail to provide detailed supporting arguments."
                    )
                },
                {
                    "role": "user",
                    "content": (
                        f"Analyze the following text and determine whether it was generated by AI (like GPT-4) or written by a human. "
                        f"Provide a detailed analysis covering all aspects such as sentence structure, emotional tone, lexical choice, and other traits mentioned above. "
                        f"Conclude with either 'AI-generated' or 'Human-written' in the end with Result: above confidence percentage.There must only be once confidence percentage in prediction. "
                        f"Ensure that your explanation is focused and brief (5-7 lines). "
                        f"Emphasize the confidence percentage at the end, showing how confident you are in the analysis, from 0% to 100%. "
                        f"Please focus only on the main distinguishing features of the text.\n\nText: {text}"
                    )
                }
            ]
        )
        
        result = response['choices'][0]['message']['content'].strip()

        # Ensure the response includes a clear confidence percentage and does not repeat it
        if "Confidence Percentage" not in result:
            result += "\nConfidence Percentage: 75%"  # Default confidence if none is returned

        # Extract confidence percentage separately
        split_result = result.split("\nConfidence Percentage: ")
        final_result = split_result[0].strip()  # This will be the AI or Human written result without the percentage
        confidence_percentage = "Confidence Percentage: " + split_result[1] if len(split_result) > 1 else "Confidence Percentage: 75%"  # Ensure confidence is always provided

        return f"{final_result}\n{confidence_percentage}"

    except openai.OpenAIError as e:
        print(f"Error with OpenAI API: {e}")
        return f"Error with OpenAI API: {e}"
    

# Route for image upload and processing
@app.route('/upload', methods=['POST'])
def upload_image():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)

        # Upload file to S3
        try:
            s3.upload_file(
                file_path,
                'essayauth',  # Replace with your S3 bucket name
                filename
            )
            print(f"File uploaded to S3 bucket 'essayauth' with key {filename}")
        except ClientError as e:
            print(f"S3 upload failed: {e}")
            return jsonify({'error': f"S3 upload failed: {e}"}), 500

        # Call AWS Textract to extract text from the image
        try:
            response = textract.start_document_text_detection(
                DocumentLocation={'S3Object': {'Bucket': 'essayauth', 'Name': filename}}
            )
            job_id = response['JobId']
            print(f"Textract job started with JobId: {job_id}")

            # Poll Textract to check for job completion
            while True:
                result = textract.get_document_text_detection(JobId=job_id)
                status = result['JobStatus']
                if status == 'SUCCEEDED':
                    print("Textract job succeeded.")
                    break
                elif status == 'FAILED':
                    print("Textract job failed.")
                    return jsonify({'error': 'Textract job failed'}), 500
                else:
                    print(f"Textract job in progress... Status: {status}")
                    time.sleep(5)  # Wait for 5 seconds before checking again

            # Extract text from Textract result
            extracted_text = " ".join([item['Text'] for item in result['Blocks'] if item['BlockType'] == 'LINE'])
            print(f"Extracted text: {extracted_text}")

            # Now send the extracted text to GPT for AI/Human detection
            ai_detection_result = detect_ai_or_human(extracted_text)

            return jsonify({'extracted_text': extracted_text, 'ai_or_human': ai_detection_result})

        except ClientError as e:
            print(f"Textract API call failed: {e}")
            return jsonify({'error': f"Textract API call failed: {e}"}), 500

    return jsonify({'error': 'Invalid file format'}), 400


if __name__ == '__main__':
    app.run(debug=True)
